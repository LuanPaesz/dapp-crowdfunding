{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-c7aa006092f45c71d2a799fdc2cfeddb6c8e633c",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/Crowdfund.sol": "project/contracts/Crowdfund.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/"
      ]
    },
    "sources": {
      "npm/@openzeppelin/contracts@5.4.0/utils/ReentrancyGuard.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
      },
      "project/contracts/Crowdfund.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.28;\r\n\r\n    import \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\r\n\r\n    contract Crowdfund is ReentrancyGuard {\r\n    struct Campaign {\r\n        address owner;\r\n        string title;\r\n        string description;\r\n        uint256 goal;\r\n        uint256 deadline;\r\n        uint256 totalRaised;\r\n        bool withdrawn;\r\n        bool exists;\r\n    }\r\n\r\n    uint256 public nextId;\r\n    mapping(uint256 => Campaign) public campaigns;\r\n    mapping(uint256 => mapping(address => uint256)) public contributions;\r\n\r\n    event CampaignCreated(uint256 indexed id, address indexed owner, string title, uint256 goal, uint256 deadline);\r\n    event Contributed(uint256 indexed id, address indexed contributor, uint256 amount);\r\n    event Withdrawn(uint256 indexed id, address indexed owner, uint256 amount);\r\n    event Refunded(uint256 indexed id, address indexed contributor, uint256 amount);\r\n\r\n    modifier onlyOwner(uint256 _id) {\r\n        require(campaigns[_id].owner == msg.sender, \"Not campaign owner\");\r\n        _;\r\n    }\r\n\r\n    modifier campaignExists(uint256 _id) {\r\n        require(campaigns[_id].exists, \"Campaign does not exist\");\r\n        _;\r\n    }\r\n\r\n    function createCampaign(\r\n        string memory _title,\r\n        string memory _description,\r\n        uint256 _goal,\r\n        uint256 _durationDays\r\n    ) external returns (uint256) {\r\n        require(_goal > 0, \"Goal must be > 0\");\r\n        require(_durationDays > 0, \"Duration must be > 0\");\r\n\r\n        uint256 id = nextId++;\r\n        campaigns[id] = Campaign({\r\n            owner: msg.sender,\r\n            title: _title,\r\n            description: _description,\r\n            goal: _goal,\r\n            deadline: block.timestamp + (_durationDays * 1 days),\r\n            totalRaised: 0,\r\n            withdrawn: false,\r\n            exists: true\r\n        });\r\n\r\n        emit CampaignCreated(id, msg.sender, _title, _goal, campaigns[id].deadline);\r\n        return id;\r\n    }\r\n\r\n    function contribute(uint256 _id) external payable campaignExists(_id) nonReentrant {\r\n        Campaign storage c = campaigns[_id];\r\n        require(block.timestamp < c.deadline, \"Campaign ended\");\r\n        require(msg.value > 0, \"No value\");\r\n\r\n        c.totalRaised += msg.value;\r\n        contributions[_id][msg.sender] += msg.value;\r\n        emit Contributed(_id, msg.sender, msg.value);\r\n    }\r\n\r\n    function withdraw(uint256 _id) external campaignExists(_id) onlyOwner(_id) nonReentrant {\r\n        Campaign storage c = campaigns[_id];\r\n        require(block.timestamp >= c.deadline || c.totalRaised >= c.goal, \"Not releasable yet\");\r\n        require(c.totalRaised >= c.goal, \"Goal not reached\");\r\n        require(!c.withdrawn, \"Already withdrawn\");\r\n\r\n        c.withdrawn = true;\r\n        uint256 amount = c.totalRaised;\r\n        (bool ok, ) = c.owner.call{value: amount}(\"\");\r\n        require(ok, \"Transfer failed\");\r\n        emit Withdrawn(_id, c.owner, amount);\r\n    }\r\n\r\n    function refund(uint256 _id) external campaignExists(_id) nonReentrant {\r\n        Campaign storage c = campaigns[_id];\r\n        require(block.timestamp >= c.deadline, \"Not ended\");\r\n        require(c.totalRaised < c.goal, \"Goal reached\");\r\n\r\n        uint256 contributed = contributions[_id][msg.sender];\r\n        require(contributed > 0, \"Nothing to refund\");\r\n        contributions[_id][msg.sender] = 0;\r\n\r\n        (bool ok, ) = msg.sender.call{value: contributed}(\"\");\r\n        require(ok, \"Refund failed\");\r\n        emit Refunded(_id, msg.sender, contributed);\r\n    }\r\n\r\n    function getCampaign(uint256 _id) external view campaignExists(_id) returns (Campaign memory) {\r\n        return campaigns[_id];\r\n    }\r\n\r\n    function getTimeLeft(uint256 _id) external view campaignExists(_id) returns (uint256) {\r\n        Campaign storage c = campaigns[_id];\r\n        if (block.timestamp >= c.deadline) return 0;\r\n        return c.deadline - block.timestamp;\r\n    }\r\n}\r\n"
      }
    }
  }
}